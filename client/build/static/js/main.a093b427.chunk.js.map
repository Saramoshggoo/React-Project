{"version":3,"sources":["logo.svg","component/Dashboard.js","component/Add.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dashboard","useState","state","setState","refresher","setRefresher","useEffect","axios","get","then","response","data","catch","error","console","log","clickHandler","e","item","name","preventDefault","temp","status","put","_id","className","map","index","key","style","color","Date","dodate","getTime","onClick","item3","delete","deleteHandler","to","Add","errorState","setErrorState","changeHadeler","target","value","length","errorName","onSubmit","post","errors","message","navigate","type","onChange","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a093b427.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useEffect,useState} from 'react';\nimport axios from 'axios';\nimport './style.css';\nimport {navigate ,Link} from '@reach/router';\n\nfunction Dashboard() {\n    const [state,setState]=useState([])\n    const [refresher, setRefresher] = useState(false);\n    useEffect(()=>{\n        axios.get(\"http://localhost:2020/api/v3/readAll\")\n        .then (response=>setState([...response.data]))\n        .catch(error=>console.log(error))\n       },[refresher])\n\n       const clickHandler=(e,item,name)=>{\n        e.preventDefault();\n        const temp = {...item}\n        console.log(temp)\n        temp.status=name\n        axios.put(`http://localhost:2020/api/v3/updateOne/${item._id}`,temp)\n        .then(response => setRefresher(!refresher))\n        .catch(error => console.log(error))\n    } \n    const deleteHandler=(e,item)=>{\n        e.preventDefault();\n        \n    axios.delete(`http://localhost:2020/api/v3/deleteOne/${item._id}`)\n     \n      .then(response => setRefresher(!refresher))\n      .catch(error=>console.log(error))\n\n\n    }\n\n\n\n\n    return (\n<div className=\"dashboard\">\n    <div className=\"design\">\n    <h2>Not Started</h2>\n      {state.map((item,index)=>(\n       <div key={index}>\n            {item.status ===\"notstart\"?\n           <div> \n               <p> Project Name: {item.name} </p>\n               <p style={{color: new Date(item.dodate).getTime() - new Date().getTime() < 0 ? 'red' : 'black'}}>\n                  Due: {item.dodate}</p>\n               <p><button onClick={(e) =>clickHandler(e,item,\"start\")}>start project</button> </p>    \n          </div>:\"\" }\n \n       </div>\n\n         ))}\n   </div>\n    <div className=\"design\"> \n       <h2>In process</h2>\n        {state.map((item,index)=>(\n        <div key={index}>\n                {item.status ===\"start\"?\n            <div> \n                <p> Project Name: {item.name} </p>\n                <p style={{color: new Date(item.dodate).getTime() - new Date().getTime() < 0 ? 'red' : 'black'}}>\n                    Due: {item.dodate}</p>\n                <p><button onClick={(e) =>clickHandler(e,item,\"completed\")}>Make To Completed</button> </p>    \n            </div>:\"\" }\n    \n        </div>\n\n            ))}\n    \n    \n    \n    \n    \n    </div>\n      <div className=\"design\">\n      <h2> completed</h2>\n      {state.map((item3,index)=>(\n        <div key={index}>\n                {item3.status ===\"completed\"?\n            <div> \n                <p>Project Name: {item3.name} </p>\n                <p style={{color: new Date(item3.dodate).getTime() - new Date().getTime() < 0 ? 'red' : 'black'}}>\n                    Due: {item3.dodate}</p>\n                <p></p>\n                <p><button onClick={(e) =>deleteHandler(e,item3)}>Remove the Task</button> </p>    \n            </div>:\"\" }\n    \n        </div>\n\n            ))}\n\n       </div>\n\n\n  \n     \n   <button ><Link to=\"/add\">go to add</Link></button>\n   </div>\n\n)\n}\n\nexport default Dashboard\n","import React,{useState} from 'react'\nimport axios from 'axios';\nimport {navigate ,Link} from '@reach/router';\nimport './style.css';\nfunction Add() {\n    const [state,setState]=useState({\n        name:\"\",\n        dodate:\"\"\n    })\n    const[errorState,setErrorState]=useState({\n        \n    }) \n    const changeHadeler=(e)=>{\n        setState({\n            ...state,\n            [e.target.name]:e.target.value\n        })\n    }\n    const submitHandler=(e)=>{\n        e.preventDefault();\n        axios.post('http://localhost:2020/api/v3/create',state)\n        .then(response => {\n            if(response.data.errors){\n              \n              setErrorState({\n               name: response.data.errors.name ? response.data.errors.name.message : \"\",\n                \n             })\n            } else {\n              console.log(\"success\")\n               navigate(\"/\")\n            }\n          })\n          .catch(error => console.log(error))\n        }\n\n\n\n\n\n\n\n    return (\n        <div  className=\"bodie\"> \n            <h4><Link to=\"/\">Back To Dashboard</Link></h4> \n        <div className=\"main\">\n            {state.name.length > 0 && state.name.length < 3 || state.errorName?\n            <p>the name has to have 3 min char</p>:<p></p>}\n            <p>{errorState.name}</p>\n            <p>{errorState.dodate}</p>\n           <form onSubmit={submitHandler}>\n           <table>\n           <tbody>\n               <tr> \n                   <td>Name Project:</td>\n                   <td><input type=\"text\" name=\"name\" onChange={changeHadeler} /></td>\n               </tr>\n               <tr> \n                   <td>due date:</td>\n                   <td><input type=\"date\" name=\"dodate\" onChange={changeHadeler} /></td>\n               </tr>\n               <tr>\n                   <td></td>\n             <td><button >submit</button></td>\n               </tr>\n              \n               </tbody>\n           </table>\n           </form> \n       \n        </div>\n        </div>\n    )\n}\n\nexport default Add\n","import React from 'react';\nimport logo from './logo.svg';\nimport {Router} from '@reach/router';\nimport Dashboard from './component/Dashboard';\nimport Add from './component/Add';\n\nfunction App() {\n  return (\n    <div> \n      <h1 >Project Manager</h1>\n     <Router>\n\n       <Dashboard path=\"/\"/>\n       <Add path=\"/add\"/>\n     </Router>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}